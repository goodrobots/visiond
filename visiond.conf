[Defaults]

### Config options in alphabetical order.  Values are set to the defaults.

# Target stream bitrate in bits/second
# bitrate = 2000000

# Brightness - 0 is automatic
# brightness = 0

# Camera device, usually /dev/video0 for a single normal camera
# camera_device = /dev/video0

# Debug: Turns on gstreamer debug to the specified level.  Note level 3 and above can be very verbose
# debug = 0

# Encoder, if not specified will default to h264.  Values are h264, mjpeg or none
# encoder = h264

# Encoder type, if not specified will fall back to sensible default for the encoder
# encoder_type = 

# Camera format, if not specified here will autodetect yuv->mjpeg->h264
# format = yuv

# Framerate of video stream, must be valid for camera
# framerate = 30

# Resolution height of video stream, must be valid for camera
# height = 480

# Stream input type: v4l2src (fpv), appsrc (cv), nvarguscamerasrc (Nvidia Jetson Platform)
# input = v4l2src

# Log destination - can be file, console or both (if run through systemd, console will log to system journal)
# logdest = both

# Log directory, if file logging set
# logdir = /var/tmp/visiond

# Descriptive name of the visiond instance / camera.  Used for display in zeroconf and -web interface.
# name = 

# Stream output type: file (save video), udp (stream video), wcast (wifibroadcast), rtsp (rtsp server), webrtc (webrtc service)
# output = rtsp

# Output destination: filename (file output), IP address (udp output), Interface (wcast output)
# output_dest = 0.0.0.0

# Output port: Port number (eg. 5000) for network destination, Channel for wifibroadcast output (eg. 1)
# output_port = 5600

## Pipeline Override - This is used to provide a manual pipeline if the auto construction fails o
# eg. Intel hardware, stream to known udp destination
# pipeline_override = v4l2src device=/dev/video2 ! video/x-raw,format=YUY2,width=640,height=480,framerate=30/1 ! autovideoconvert ! vaapih264enc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=192.168.1.111 port=5000 sync=false
#
# eg. Flir ONE colourized thermal stream
# pipeline_override = v4l2src device=/dev/video3 ! queue ! autovideoconvert ! omxh264enc

# Pixel Format, could be (fourcc)YUV2, I420, RGB etc
# pixelformat = I420

# Retry timeout - number of seconds visiond will wait before trying to recreate pipeline after error
# retry = 10

# Set the path to SSL certs for webrtc signalling server.
# ssl_keyfile = /srv/visiond/ssl/visiond.key
# ssl_certfile = /srv/visiond/ssl/visiond.crt

# Resolution width of video stream, must be valid for camera
# width = 640

# If True (default), advertise the video stream over mDNS/Zeroconf
# zeroconf=True